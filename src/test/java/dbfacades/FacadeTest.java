package dbfacades;

import entity.Customer;
import entity.ItemType;
import entity.OrderExamprep;
import entity.OrderLine;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

/**
 * UNIT TEST example that mocks away the database with an in-memory database See
 * Persistence unit in persistence.xml in the test packages
 *
 * Use this in your own project by: - Delete everything inside the setUp method,
 * but first, observe how test data is created - Delete the single test method,
 * and replace with your own tests
 *
 */
public class FacadeTest {

    EntityManagerFactory emf = Persistence.createEntityManagerFactory("pu-test", null);
    //EntityManagerFactory emf = Persistence.createEntityManagerFactory("pu", null);

    OrderFacade facade = new OrderFacade(emf);

    /**
     * Setup test data in the database to a known state BEFORE Each test
     */
    @Before
    public void setUp() {
        EntityManager em = emf.createEntityManager();
        try {
            em.getTransaction().begin();
            //Delete all, since some future test cases might add/change data
            em.createQuery("delete from OrderExamprep").executeUpdate();
            em.createQuery("delete from Customer").executeUpdate();
            em.createQuery("delete from ItemType").executeUpdate();
            em.createQuery("delete from OrderLine").executeUpdate();
            //Add our test data
            em.persist(new Customer("Mark", "mdd@gmail.com"));
            em.persist(new Customer("Mads", "mvn@gmail.com"));
            em.persist(new Customer("Christian", "jenz@gmail.com"));

            em.persist(new OrderExamprep());

            em.persist(new ItemType("Balls of steel", "I'ts just balls of steel, nothing more.."));
            em.persist(new ItemType("Soda", "Because why not."));
            em.persist(new ItemType("JPA", "Its cool."));
            em.persist(new ItemType("JPQL", "It may suck now, but.."));

            em.getTransaction().commit();
        } finally {
            em.close();
        }
    }

    // Test the single method in the Facade
    @Test
    public void testCreateACustomer() {
        Customer cust = facade.CreateACustomer("Juste", "Justelsen");
        Assert.assertEquals("Juste", cust.getName());

    }

    @Test
    public void testFindACustomer() {
        final String EMAIL = "mdd@gmail.com";
        Customer cust = facade.findACustomer(EMAIL);
        Assert.assertEquals(EMAIL, cust.getEmail());
    }

    @Test
    public void testGetAllCustomers() {
        List<Customer> customers = facade.getAllCustomers();
        Assert.assertEquals(3, customers.size());

    }

    @Test
    public void testCreateAnOrder() {
        // nothing much to test on since no method to query the db's orders with
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("pu-test", null);
        EntityManager em = emf.createEntityManager();

        OrderExamprep order = facade.createAnOrder(new OrderExamprep());

        List<OrderExamprep> findOrder = (List<OrderExamprep>) em.createQuery("SELECT c FROM OrderExamprep c").getResultList();

        Assert.assertEquals(order, findOrder.get(1));

    }

    @Test
    public void testAddOrderToCustomer() {
        final int NUMBER_OF_ORDERS_CUSTOMER_HAS = 1;
        facade.addOrderToCustomer(new OrderExamprep(), "mdd@gmail.com");
        Customer cust = facade.findACustomer("mdd@gmail.com");
        Assert.assertEquals(NUMBER_OF_ORDERS_CUSTOMER_HAS, cust.getOrders().size());

    }

    @Test
    public void testFindAnOrder() {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("pu-test");
        EntityManager em = emf.createEntityManager();
        try {
            /*
            multiple problems:
            - due to a customer having multiple orders we can only get a specific order
                by its autogenerated ID 
            - without an interface to choose IDs from, there is no way to tell
                which ID an order is going to be assigned within the db
            
            solution:
            - to solve this, we get a list of orders and take the first order (which is there).
                This is to reesemble an interface showing a list o IDs where choosing
                the index is equivelant to choose an order, on the interface.
            
             */
            List<OrderExamprep> orders = em.createQuery("SELECT c FROM OrderExamprep c").getResultList();
            Long id = orders.get(0).getId();

            OrderExamprep order = facade.findAnOrder(id);
            Assert.assertEquals(orders.get(0), order);

        } finally {
            em.close();
        }

    }

    @Test
    public void testFindAllOfCustomersOrders() {
        final String CUSTOMER_EMAIL = "mdd@gmail.com";
        facade.addOrderToCustomer(new OrderExamprep(), CUSTOMER_EMAIL);
        facade.addOrderToCustomer(new OrderExamprep(), CUSTOMER_EMAIL);
        facade.addOrderToCustomer(new OrderExamprep(), CUSTOMER_EMAIL);

        List<OrderExamprep> orders = facade.findAllOfCustomersOrders(CUSTOMER_EMAIL);
        Assert.assertEquals(3, orders.size());

    }

    @Test
    public void testAddOrderLineToOrder() {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("pu-test");
        EntityManager em = emf.createEntityManager();
        Long id; 
        try {
            List<OrderExamprep> orders = (List<OrderExamprep>) em.createQuery("SELECT c FROM OrderExamprep c").getResultList();
            id = orders.get(0).getId();
        } finally {
            em.close();
        }
        // ^ because we dont know what the ID is in the database since it auto increments it
        // without returning the id 

        final int QUANTITY = 25;
        OrderExamprep orderWithOrderlineAdded = facade.addOrderLineToOrder(QUANTITY, id);
        OrderExamprep order = facade.findAnOrder(id);
        Assert.assertEquals(order.getOrderlines().get(0),
                orderWithOrderlineAdded.getOrderlines().get(0));

    }

}
